{"version":3,"file":"polygon.component.js","sourceRoot":"","sources":["../../src/graphk/polygon/polygon.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {AfterViewInit, Component, ElementRef, Input, OnChanges, OnInit, SimpleChanges, ViewChild} from '@angular/core';\n\nexport class PolygonGraphData {\n    data: number[];\n    max: number;\n    // getMax(): number {\n    //     if (undefined === this.max) {\n    //         for (let i = 0; this.data && i < this.data.length; i++) {\n    //\n    //         }\n    //     }\n    // }\n}\n\n    // templateUrl: './polygon.component.html',\n    // styleUrls: ['./polygon.component.scss']\n    // template: '<canvas #canvas></canvas>'\n@Component({\n    selector: 'graphk-polygon',\n    templateUrl: './polygon.component.html',\n    styleUrls: ['./polygon.component.scss']\n})\n\nexport class PolygonComponent implements OnInit, AfterViewInit, OnChanges {\n    private _width: number;\n    private _height: number;\n    private _padding = 5;\n    private _data: PolygonGraphData;\n    private _polygonLength = 1;\n    @Input()\n    public polygonLineStrokeStyle = '#969696';\n    public polygonDataFillStyle = 'rgba(71, 169, 203, 0.5)';\n    @Input()\n    public set polygonLength(value: number) {\n        this._polygonLength = value;\n        // this.reDraw();\n    }\n\n    @Input()\n    public set padding(value: number) {\n        this._padding = value;\n        // this.reDraw();\n    }\n\n    @Input()\n    public set data(value: PolygonGraphData) {\n        this._data = value;\n        // this.reDraw();\n    }\n    @Input()\n    public set width(value: number) {\n        this._width = value;\n        // this.reDraw();\n    }\n\n    @Input()\n    public set height(value: number) {\n        this._height = value;\n        // this.reDraw();\n    }\n\n    public get polygonLength(): number {\n        return this._polygonLength;\n        // this.reDraw();\n    }\n\n    public get padding(): number {\n        return this._padding;\n    }\n\n    public get width(): number {\n        return this._width;\n    }\n\n    public get height(): number {\n        return this._height;\n    }\n\n    public get data(): PolygonGraphData {\n        return this._data;\n    }\n\n    @ViewChild('canvas') public canvasElementRef: ElementRef;\n\n    constructor() {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.reDraw();\n    }\n    ngOnInit() {\n        this.reDraw();\n    }\n\n    ngAfterViewInit() {\n        this.reDraw();\n    }\n\n    private reDraw() {\n        // console.log(event.target);\n        const canvas = this.canvasElementRef.nativeElement as HTMLCanvasElement;\n        const ctx = canvas.getContext('2d');\n        // ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n        if (!this.data || !this.data.data || this.data.data.length < 3) {\n            return;\n        }\n\n        // console.log(this.canvasContainerElementRef.nativeElement.clientWidth);\n        // return;\n        // canvas.height = canvas.width = Math.max(this.canvasContainerElementRef.nativeElement.clientWidth - 5, 0);\n        canvas.width = Math.max(this.width - 5, 0)\n        canvas.height = Math.max(this.height - 5, 0)\n        const centerX = canvas.width / 2;\n        const centerY = canvas.height / 2;\n        const startAngle = -Math.PI / 2;\n        const sides = this.data.data.length;\n        const radius = (centerX) - this.padding;\n        const jumpRadius = (radius) / this.polygonLength;\n\n\n        this.polygonLine(ctx, centerX, centerY, radius, sides, startAngle);\n        for (let i = 1; i <= this.polygonLength; i++) {\n            this.polygon(ctx, centerX, centerY, jumpRadius * i, sides, startAngle);\n        }\n        this.polygonData(ctx, centerX, centerY, this.data, radius,  startAngle);\n        // ctx.beginPath();\n        // ctx.arc(canvas.width / 2, canvas.height / 2, 50, 0, 2 * Math.PI);\n        // ctx.stroke();\n        // ctx.beginPath(); //경로 그리기 시작\n        // ctx.moveTo(canvas.width / 2, canvas.height / 2); //기준 좌표값 이동\n        // context.translate(x, y);\n        // ctx.lineTo(100,100); // X, Y 좌표를 사용하여 선 그리기\n        // ctx.lineTo(200,100); // X, Y 좌표를 사용하여 선 그리기\n        // ctx.fill(); //경로 그리기 종료(채움)\n        // ctx.beginPath(); //경로 그리기 시작\n        // ctx.moveTo(50, 50); //기준 좌표값 이동\n        // ctx.lineTo(200,50); // X, Y 좌표를 사용하여 선 그리기\n        // ctx.lineTo(50,200);\n        // ctx.fill(); //경로 그리기 종료(채움)\n    }\n\n    private polygonData(ctx: CanvasRenderingContext2D|any, x: number, y: number, data: PolygonGraphData, radius: number, startAngle: number) {\n        const sides = data.data.length;\n        if (sides < 3) {\n            return;\n        } // 3각형 이하는 그리지 않도록 한다.\n        // A:B = C:X    => 30:50 = 33 : x\n        // 30X = 50*33\n        // X = BC / 30\n\n        // max:radius = val:?\n        // max*? = radius*val\n        // ? = radius*val / max;\n        const degree = (Math.PI * 2) / sides; // 각 면에 대한 각도를 계산한다.\n        ctx.save(); // 드로잉 상태를 저정한다.\n        ctx.strokeStyle = this.polygonDataFillStyle;\n        ctx.fillStyle = this.polygonDataFillStyle;\n        ctx.beginPath(); // 경로 그리기 시작\n        ctx.translate(x, y); // 드로잉 좌표 공간을 다각형 중심좌표로 이동한다. context.rotate(startAngle);\n        // 시작 각도를 중심으로 그리도록 하기 위하여 회전한다. context.moveTo(radius, 0); //다각형의 시작 위치로 이동한다.\n        ctx.rotate(startAngle); // 시작 각도를 중심으로 그리도록 하기 위하여 회전한다.\n        ctx.moveTo((radius * data.data[0]) / data.max, 0); // 다각형의 시작 위치로 이동한다.\n        // ctx.lineTo(0, 0);\n        for (let i = 1; i < sides; i++) {// 면의수만큼루프를반복한다\n            // 다음 꼭지점까지 선을 그린다.\n            const setRedius = (radius * data.data[i]) / data.max;\n            console.log(setRedius);\n            const sx = setRedius * Math.cos(degree * i);\n            const sy = setRedius * Math.sin(degree * i);\n            ctx.lineTo(sx, sy);\n        }\n        ctx.fill();\n        ctx.closePath(); // 패스를 닫는다. context.restore(); //기존 드로잉 상태를 복구한다.\n        ctx.stroke();\n        ctx.restore(); // 기존 드로잉 상태를 복구한다.\n    }\n\n    private polygon(ctx: CanvasRenderingContext2D|any, x: number, y: number, radius: number, sides: number, startAngle: number) {\n        if (sides < 3) {\n            return;\n        } // 3각형 이하는 그리지 않도록 한다.\n        const degree = (Math.PI * 2) / sides; // 각 면에 대한 각도를 계산한다.\n        ctx.save(); // 드로잉 상태를 저정한다.\n        ctx.strokeStyle = this.polygonLineStrokeStyle;\n        ctx.beginPath(); // 경로 그리기 시작\n        ctx.translate(x, y); // 드로잉 좌표 공간을 다각형 중심좌표로 이동한다. context.rotate(startAngle); //시작 각도를 중심으로 그리도록 하기 위하여 회전한다. context.moveTo(radius, 0); //다각형의 시작 위치로 이동한다.\n        ctx.rotate(startAngle); // 시작 각도를 중심으로 그리도록 하기 위하여 회전한다.\n        ctx.moveTo(radius, 0); // 다각형의 시작 위치로 이동한다.\n        // ctx.lineTo(0, 0);\n        for (let i = 1; i < sides; i++) {// 면의수만큼루프를반복한다\n            // 다음 꼭지점까지 선을 그린다.\n            const sx = radius * Math.cos(degree * i);\n            const sy = radius * Math.sin(degree * i);\n            ctx.lineTo(sx, sy);\n        }\n        // ctx.fill();\n        ctx.closePath(); // 패스를 닫는다. context.restore(); //기존 드로잉 상태를 복구한다.\n        ctx.stroke();\n\n\n        // ctx.beginPath(); // 경\n        // ctx.arc(radius, 0, 50, 0, 2 * Math.PI);\n        // ctx.stroke();\n        // for (let i = 1; i < sides; i++) {// 면의수만큼루프를반복한다\n        //     // 다음 꼭지점까지 선을 그린다.\n        //     ctx.beginPath(); // 경\n        //     const sx = radius * Math.cos(degree * i);\n        //     const sy = radius * Math.sin(degree * i)\n        //     ctx.arc(sx, sy, 50, 0, 2 * Math.PI);\n        //     ctx.closePath();\n        //     ctx.stroke();\n        // }\n        ctx.restore(); // 기존 드로잉 상태를 복구한다.\n    }\n\n    private polygonLine(ctx: CanvasRenderingContext2D|any, x: number, y: number, radius: number, sides: number, startAngle: number) {\n        if (sides < 3) {\n            return;\n        } // 3각형 이하는 그리지 않도록 한다.\n        const degree = (Math.PI * 2) / sides; // 각 면에 대한 각도를 계산한다.\n        ctx.save(); // 드로잉 상태를 저정한다.\n        ctx.strokeStyle = this.polygonLineStrokeStyle;\n        ctx.translate(x, y); // 드로잉 좌표 공간을 다각형 중심좌표로 이동한다. context.rotate(startAngle);\n        // 시작 각도를 중심으로 그리도록 하기 위하여 회전한다. context.moveTo(radius, 0); //다각형의 시작 위치로 이동한다.\n        ctx.rotate(startAngle); // 시작 각도를 중심으로 그리도록 하기 위하여 회전한다.\n        ctx.beginPath(); // 경로 그리기 시작\n\n\n        ctx.moveTo(radius, 0); // 다각형의 시작 위치로 이동한다.\n        ctx.lineTo(0, 0);\n        // ctx.lineTo(100, 20);\n        // ctx.closePath();\n        ctx.stroke();\n        // ctx.closePath();\n\n        for (let i = 1; i < sides; i++) {// 면의수만큼루프를반복한다\n            // 다음 꼭지점까지 선을 그린다.\n            // ctx.beginPath(); // 경\n            const sx = radius * Math.cos(degree * i);\n            const sy = radius * Math.sin(degree * i);\n            ctx.moveTo(sx, sy); // 다각형의 시작 위치로 이동한다.\n            ctx.lineTo(0, 0);\n            // ctx.closePath();\n            ctx.stroke();\n        }\n        ctx.restore(); // 기존 드로잉 상태를 복구한다.\n    }\n}\n"]}
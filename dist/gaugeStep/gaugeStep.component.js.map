{"version":3,"file":"gaugeStep.component.js","sourceRoot":"","sources":["../../src/graphk/gaugeStep/gaugeStep.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAEH,SAAS,EACT,UAAU,EACV,KAAK,EAGL,MAAM,EAEN,SAAS,EACZ,MAAM,eAAe,CAAC;AAGvB;IAAA;QACI,SAAI,GAAG,KAAK,CAAC;QACb,kBAAa,GAAG,yBAAyB,CAAC;QAC1C,UAAK,GAAG,EAAE,CAAC;QACX,YAAO,GAAG,KAAK,CAAC;QAChB,0BAA0B;QAC1B,eAAU,GAAG,SAAS,CAAC;QACvB,cAAS,GAAG,SAAS,CAAC;IAC1B,CAAC;IAAD,oBAAC;AAAD,CAAC,AARD,IAQC;;AAEG,2CAA2C;AAC3C,0CAA0C;AAC1C,wCAAwC;AACxC,QAAQ;AACZ;IAmBI;QAPO,YAAO,GAAG,CAAC,CAAC;IAQnB,CAAC;IAED,wCAAW,GAAX,UAAY,OAAsB;QAC9B,IAAI,CAAC,MAAM,EAAE,CAAC;IAClB,CAAC;IACD,qCAAQ,GAAR;QACI,IAAI,CAAC,MAAM,EAAE,CAAC;IAClB,CAAC;IAED,4CAAe,GAAf;QACI,IAAI,CAAC,MAAM,EAAE,CAAC;IAClB,CAAC;IAED,yBAAyB;IACzB,EAAE;IACF,2BAA2B;IAC3B,kBAAkB;IAClB,uBAAuB;IACvB,SAAS;IACT,EAAE;IACF,EAAE;IACF,yBAAyB;IACzB,kBAAkB;IAClB,sBAAsB;IACtB,SAAS;IACT,EAAE;IACF,EAAE;IACF,qBAAqB;IACrB,uBAAuB;IACvB,wBAAwB;IACxB,aAAa;IACb,EAAE;IACF,EAAE;IACF,oBAAoB;IACpB,uBAAuB;IACvB,wBAAwB;IACxB,YAAY;IACJ,mCAAM,GAAd;QACI,yBAAyB;QACzB,IAAM,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,aAAkC,CAAC;QACxE,IAAM,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACpC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;QAEjD,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;YACpC,OAAO;SACV;QAED,yEAAyE;QACzE,UAAU;QACV,4GAA4G;QAC5G,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,CAAA;QAC1C,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC,CAAA;QAC5C,IAAM,OAAO,GAAG,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC;QACjC,IAAM,OAAO,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;QAClC,mCAAmC;QACnC,uCAAuC;QACvC,IAAM,MAAM,GAAG,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC;QACxC,oDAAoD;QAEpD,UAAU;QACV,gCAAgC;QAChC,sBAAsB;QACtB,MAAM;QACN,aAAa;QACb,qBAAqB;QACrB,mFAAmF;QACnF,0CAA0C;QAC1C,gCAAgC;QAChC,iCAAiC;QACjC,kFAAkF;QAElF,QAAQ;QACR,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,gBAAgB;QAC5B,GAAG,CAAC,SAAS,GAAG,GAAG,CAAC;QACpB,GAAG,CAAC,WAAW,GAAG,SAAS,CAAC;QAC5B,GAAG,CAAC,SAAS,CAAC,OAAO,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;QACtC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACpB,GAAG,CAAC,SAAS,EAAE,CAAC;QAChB,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACjB,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;QAClC,GAAG,CAAC,SAAS,EAAE,CAAC;QAChB,GAAG,CAAC,MAAM,EAAE,CAAC;QACb,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,mBAAmB;QAGlC,yBAAyB;QACzB,kBAAkB;QAClB,IAAI,WAAW,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;QACvC,YAAY;QACZ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACvC,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC1B,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;gBACZ,SAAS;aACZ;YACD,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,gBAAgB;YAC5B,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC;YACnC,GAAG,CAAC,SAAS,GAAG,GAAG,CAAC;YACpB,GAAG,CAAC,WAAW,GAAG,SAAS,CAAC;YAC5B,GAAG,CAAC,SAAS,CAAC,OAAO,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;YACtC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACzD,GAAG,CAAC,SAAS,EAAE,CAAC;YAChB,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACjB,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,WAAW,EAAE,CAAC,EAAE,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC1D,GAAG,CAAC,SAAS,EAAE,CAAC;YAChB,GAAG,CAAC,IAAI,EAAE,CAAC;YACX,GAAG,CAAC,MAAM,EAAE,CAAC;YACb,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,mBAAmB;SACrC;QAED,WAAW,GAAG,CAAC,MAAM,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;QAClC,aAAa;QACb,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,gBAAgB;QAC5B,GAAG,CAAC,SAAS,GAAG,SAAS,CAAC;QAC1B,GAAG,CAAC,SAAS,GAAG,CAAC,CAAC;QAClB,GAAG,CAAC,WAAW,GAAG,SAAS,CAAC;QAC5B,GAAG,CAAC,WAAW,GAAG,SAAS,CAAC;QAC5B,GAAG,CAAC,UAAU,GAAG,CAAC,CAAC;QACnB,GAAG,CAAC,aAAa,GAAG,CAAC,CAAC;QACtB,GAAG,CAAC,aAAa,GAAG,CAAC,CAAC;QACtB,GAAG,CAAC,SAAS,CAAC,OAAO,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;QACtC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACpB,GAAG,CAAC,SAAS,EAAE,CAAC;QAChB,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACjB,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,WAAW,EAAE,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;QACvC,GAAG,CAAC,SAAS,EAAE,CAAC;QAChB,GAAG,CAAC,IAAI,EAAE,CAAC;QACX,GAAG,CAAC,MAAM,EAAE,CAAC;QACb,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,mBAAmB;QAGlC,WAAW,GAAG,CAAC,MAAM,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;QAClC,eAAe;QACf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACvC,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC1B,IAAI,IAAI,CAAC,OAAO,EAAE;gBACd,SAAS;aACZ;YACD,IAAM,KAAK,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACjD,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,gBAAgB;YAC5B,GAAG,CAAC,SAAS,GAAG,MAAM,GAAG,KAAK,GAAG,IAAI,GAAG,KAAK,GAAG,IAAI,GAAG,KAAK,GAAG,GAAG,CAAC;YACnE,GAAG,CAAC,SAAS,GAAG,CAAC,CAAC;YAClB,GAAG,CAAC,WAAW,GAAG,SAAS,CAAC;YAC5B,GAAG,CAAC,SAAS,CAAC,OAAO,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;YACtC,IAAM,MAAM,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;YAC5D,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YACnB,GAAG,CAAC,SAAS,EAAE,CAAC;YAChB,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACjB,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,WAAW,EAAE,CAAC,EAAE,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC1D,GAAG,CAAC,SAAS,EAAE,CAAC;YAChB,GAAG,CAAC,IAAI,EAAE,CAAC;YACX,gBAAgB;YAChB,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,mBAAmB;SACrC;QAGD,WAAW,GAAG,CAAC,MAAM,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;QAClC,UAAU;QACV,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACvC,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC1B,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;gBACf,SAAS;aACZ;YACD,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,gBAAgB;YAC5B,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;YAC/B,GAAG,CAAC,SAAS,GAAG,CAAC,CAAC;YAClB,GAAG,CAAC,WAAW,GAAG,SAAS,CAAC;YAC5B,GAAG,CAAC,WAAW,GAAG,SAAS,CAAC;YAC5B,GAAG,CAAC,UAAU,GAAG,EAAE,CAAC;YACpB,GAAG,CAAC,aAAa,GAAG,CAAC,CAAC;YACtB,GAAG,CAAC,aAAa,GAAG,CAAC,CAAC;YACtB,GAAG,CAAC,SAAS,CAAC,OAAO,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;YACtC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACzD,GAAG,CAAC,SAAS,EAAE,CAAC;YAChB,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACjB,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,WAAW,EAAE,CAAC,EAAE,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC1D,GAAG,CAAC,SAAS,EAAE,CAAC;YAChB,GAAG,CAAC,IAAI,EAAE,CAAC;YACX,gBAAgB;YAChB,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,mBAAmB;SACrC;QAGD,WAAW,GAAG,CAAC,MAAM,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;QAGlC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACvC,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC1B,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,gBAAgB;YAC5B,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;YAChC,GAAG,CAAC,SAAS,GAAG,CAAC,CAAC;YAClB,GAAG,CAAC,WAAW,GAAG,SAAS,CAAC;YAC5B,GAAG,CAAC,WAAW,GAAG,SAAS,CAAC;YAC5B,GAAG,CAAC,UAAU,GAAG,CAAC,CAAC;YACnB,GAAG,CAAC,aAAa,GAAG,CAAC,CAAC;YACtB,GAAG,CAAC,aAAa,GAAG,CAAC,CAAC;YACtB,QAAQ;YACR,2BAA2B;YAC3B,6CAA6C;YAC7C,+FAA+F;YAC/F,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,UAAU,CAAC;YACvE,GAAG,CAAC,SAAS,GAAG,QAAQ,CAAC;YACzB,GAAG,CAAC,SAAS,CAAC,OAAO,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;YAEtC,mEAAmE;YACnE,qDAAqD;YACrD,8GAA8G;YAC9G,IAAM,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS;YACxC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YACnB,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa;YAC7D,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,eAAe;YAC7D,gCAAgC;YAChC,GAAG,CAAC,SAAS,EAAE,CAAC;YAChB,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACjB,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,WAAW,CAAC,CAAA;YAC3C,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC;YAC1C,GAAG,CAAC,SAAS,EAAE,CAAC;YAChB,GAAG,CAAC,IAAI,EAAE,CAAC;YACX,GAAG,CAAC,MAAM,EAAE,CAAC;YACb,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,mBAAmB;SACrC;QAID,WAAW,GAAG,CAAC,MAAM,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;QAClC,QAAQ;QACR,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACvC,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC1B,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;gBACf,SAAS;aACZ;YACD,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,gBAAgB;YAC5B,GAAG,CAAC,SAAS,GAAG,SAAS,CAAC;YAC1B,GAAG,CAAC,SAAS,GAAG,CAAC,CAAC;YAClB,GAAG,CAAC,WAAW,GAAG,SAAS,CAAC;YAC5B,GAAG,CAAC,WAAW,GAAG,SAAS,CAAC;YAC5B,GAAG,CAAC,UAAU,GAAG,CAAC,CAAC;YACnB,GAAG,CAAC,aAAa,GAAG,CAAC,CAAC;YACtB,GAAG,CAAC,aAAa,GAAG,CAAC,CAAC;YACtB,2BAA2B;YAC3B,mEAAmE;YACnE,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAA;YACzC,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,UAAU,CAAC;YAC7F,GAAG,CAAC,SAAS,GAAG,QAAQ,CAAC;YAEzB,GAAG,CAAC,SAAS,CAAC,OAAO,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;YACtC,qDAAqD;YACrD,8GAA8G;YAC9G,gCAAgC;YAChC,IAAM,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS;YACxC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YACnB,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa;YAC7D,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,eAAe;YAC7D,GAAG,CAAC,SAAS,EAAE,CAAC;YAChB,IAAM,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACnF,GAAG,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YACtB,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC;YAC5B,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YACrB,GAAG,CAAC,SAAS,EAAE,CAAC;YAChB,GAAG,CAAC,IAAI,EAAE,CAAC;YACX,GAAG,CAAC,MAAM,EAAE,CAAC;YACb,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,mBAAmB;SACrC;QAQD,WAAW,GAAG,CAAC,MAAM,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;QAClC,aAAa;QACb,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,gBAAgB;QAC5B,GAAG,CAAC,SAAS,GAAG,SAAS,CAAC;QAC1B,GAAG,CAAC,SAAS,GAAG,CAAC,CAAC;QAClB,GAAG,CAAC,WAAW,GAAG,SAAS,CAAC;QAC5B,GAAG,CAAC,WAAW,GAAG,SAAS,CAAC;QAC5B,GAAG,CAAC,UAAU,GAAG,CAAC,CAAC;QACnB,GAAG,CAAC,aAAa,GAAG,CAAC,CAAC;QACtB,GAAG,CAAC,aAAa,GAAG,CAAC,CAAC;QACtB,GAAG,CAAC,SAAS,CAAC,OAAO,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;QACtC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACpB,GAAG,CAAC,SAAS,EAAE,CAAC;QAChB,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACjB,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,WAAW,EAAE,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;QACvC,GAAG,CAAC,SAAS,EAAE,CAAC;QAChB,GAAG,CAAC,IAAI,EAAE,CAAC;QACX,GAAG,CAAC,MAAM,EAAE,CAAC;QACb,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,mBAAmB;QAMlC,6DAA6D;QAC7D,+BAA+B;QAC/B,+CAA+C;QAC/C,6CAA6C;QAC7C,gCAAgC;QAChC,iFAAiF;QACjF,kFAAkF;QAClF,2DAA2D;QAC3D,0EAA0E;QAC1E,uBAAuB;QACvB,mDAAmD;QACnD,0BAA0B;QAC1B,4DAA4D;QAC5D,iCAAiC;QACjC,mDAAmD;QACnD,mDAAmD;QACnD,0BAA0B;QAC1B,IAAI;QACJ,cAAc;QACd,qEAAqE;QACrE,gBAAgB;QAChB,qCAAqC;IACzC,CAAC;IAEM,oCAAO,GAAd;QACI,KAAK,CAAC,CAAC,CAAC,CAAC;QACT,2EAA2E;QAC3E,uCAAuC;QACvC,2CAA2C;QAC3C,mBAAmB;QACnB,sFAAsF;QACtF,6CAA6C;QAC7C,gCAAgC;QAChC,kFAAkF;QAClF,gBAAgB;IACpB,CAAC;;gBA5VJ,SAAS,SAAC;oBACP,QAAQ,EAAE,kBAAkB;oBAC5B,QAAQ,EAAE,2BAA2B;iBAExC;;;;;wBAGI,KAAK;yBAEL,KAAK;0BAEL,KAAK;uBAEL,KAAK;mCAGL,MAAM,YACN,SAAS,SAAC,QAAQ;;IA4UvB,yBAAC;CAAA,AA7VD,IA6VC;SAvVY,kBAAkB","sourcesContent":["import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    SimpleChanges,\n    ViewChild\n} from '@angular/core';\nimport {timer} from 'rxjs/internal/observable/timer';\n\nexport class GaugeStepData {\n    safe = false;\n    safeFillStyle = 'rgba(71, 169, 203, 0.5)';\n    title = '';\n    checked = false;\n    // titleStyle = '#c3c3c3';\n    titleStyle = '#ffffff';\n    fillStyle = '#fdd30e';\n}\n\n    // templateUrl: './polygon.component.html',\n    // styleUrls: ['./polygon.component.scss']\n    // template: '<canvas #canvas></canvas>'\n    // 1.0.3\n@Component({\n    selector: 'graphk-gaugeStep',\n    template: '<canvas #canvas></canvas>',\n    // styles: ['canvas {border: 1px solid black}']\n})\n\nexport class GaugeStepComponent implements OnInit, AfterViewInit, OnChanges {\n    @Input()\n    public width: number;\n    @Input()\n    public height: number;\n    @Input()\n    public padding = 5;\n    @Input()\n    public data: GaugeStepData[];\n\n    @Output()\n    @ViewChild('canvas') public canvasElementRef: ElementRef;\n\n    constructor() {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.reDraw();\n    }\n    ngOnInit() {\n        this.reDraw();\n    }\n\n    ngAfterViewInit() {\n        this.reDraw();\n    }\n\n    // 퍼센트 계산법 공식과 간단한 예제입니다.\n    //\n    // 전체값에서 일부값은 몇 퍼센트? 계산법 공식\n    // 일부값 ÷ 전체값 X 100\n    // 예제) 300에서 105는 몇퍼센트?\n    // 답: 35%\n    //\n    //\n    // 전체값의 몇 퍼센트는 얼마? 계산법 공식\n    // 전체값 X 퍼센트 ÷ 100\n    // 예제) 300의 35퍼센트는 얼마?\n    // 답) 105\n    //\n    //\n    // 숫자를 몇 퍼센트 증가시키는 공식\n    // 숫자 X (1 + 퍼센트 ÷ 100)\n    // 예제) 1548을 66퍼센트 증가하면?\n    // 답) 2569.68\n    //\n    //\n    // 숫자를 몇 퍼센트 감소하는 공식\n    // 숫자 X (1 - 퍼센트 ÷ 100)\n    // 예제) 1548을 66퍼센트 감소하면?\n    // 답) 526.32\n    private reDraw() {\n        // console.log('onDraw');\n        const canvas = this.canvasElementRef.nativeElement as HTMLCanvasElement;\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n        if (!this.data || this.data.length < 1) {\n            return;\n        }\n\n        // console.log(this.canvasContainerElementRef.nativeElement.clientWidth);\n        // return;\n        // canvas.height = canvas.width = Math.max(this.canvasContainerElementRef.nativeElement.clientWidth - 5, 0);\n        canvas.width = Math.max(this.width - 5, 0)\n        canvas.height = Math.max(this.height - 5, 0)\n        const centerX = canvas.width / 2;\n        const centerY = canvas.height / 2;\n        // const startAngle = -Math.PI / 2;\n        // const sides = this.data.data.length;\n        const radius = (centerX) - this.padding;\n        // const jumpRadius = (radius) / this.polygonLength;\n\n        // timer()\n        // timer(1000).subscribe(() => {\n        //     this.drawArc();\n        // });\n        // true : 반시계\n        // false: 시방향 default\n        // ctx.arc(canvas.width / 2, canvas.height / 2, radius, 0, this.angleRadian, true);\n        // const end = this.angleRadian / 2 - 0.4;\n        // const end = this.angleRadian;\n        // const end = Math.PI * 2 - 0.5;\n        // ctx.arc(canvas.width / 2, canvas.height / 2, radius, Math.PI - end, end, true);\n\n        // 가이드라인\n        ctx.save(); // 드로잉 상태를 저정한다.\n        ctx.lineWidth = 0.5;\n        ctx.strokeStyle = '#c3c3c3';\n        ctx.translate(centerX, canvas.height);\n        ctx.rotate(Math.PI);\n        ctx.beginPath();\n        ctx.moveTo(0, 0);\n        ctx.arc(0, 0, radius, 0, Math.PI);\n        ctx.closePath();\n        ctx.stroke();\n        ctx.restore(); // 기존 드로잉 상태를 복구한다.\n\n\n        // 전체값의 몇 퍼센트는 얼마? 계산법 공식\n        // 전체값 X 퍼센트 ÷ 100\n        let applyRadius = (radius * 100) / 100;\n        // safe zone\n        for (let i = 0; i < this.data.length; i++) {\n            const data = this.data[i];\n            if (!data.safe) {\n                continue;\n            }\n            ctx.save(); // 드로잉 상태를 저정한다.\n            ctx.fillStyle = data.safeFillStyle;\n            ctx.lineWidth = 0.1;\n            ctx.strokeStyle = '#c3c3c3';\n            ctx.translate(centerX, canvas.height);\n            ctx.rotate(Math.PI + ((Math.PI / this.data.length) * i));\n            ctx.beginPath();\n            ctx.moveTo(0, 0);\n            ctx.arc(0, 0, applyRadius, 0, Math.PI / this.data.length);\n            ctx.closePath();\n            ctx.fill();\n            ctx.stroke();\n            ctx.restore(); // 기존 드로잉 상태를 복구한다.\n        }\n\n        applyRadius = (radius * 95) / 100;\n        // margin arc\n        ctx.save(); // 드로잉 상태를 저정한다.\n        ctx.fillStyle = '#ffffff';\n        ctx.lineWidth = 1;\n        ctx.strokeStyle = '#c3c3c3';\n        ctx.shadowColor = '#c3c3c3';\n        ctx.shadowBlur = 5;\n        ctx.shadowOffsetX = 0;\n        ctx.shadowOffsetY = 4;\n        ctx.translate(centerX, canvas.height);\n        ctx.rotate(Math.PI);\n        ctx.beginPath();\n        ctx.moveTo(0, 0);\n        ctx.arc(0, 0, applyRadius, 0, Math.PI);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n        ctx.restore(); // 기존 드로잉 상태를 복구한다.\n\n\n        applyRadius = (radius * 85) / 100;\n        // none checked\n        for (let i = 0; i < this.data.length; i++) {\n            const data = this.data[i];\n            if (data.checked) {\n                continue;\n            }\n            const color = 230 - (150 / this.data.length) * i;\n            ctx.save(); // 드로잉 상태를 저정한다.\n            ctx.fillStyle = 'rgb(' + color + ', ' + color + ', ' + color + ')';\n            ctx.lineWidth = 1;\n            ctx.strokeStyle = '#c3c3c3';\n            ctx.translate(centerX, canvas.height);\n            const rotate = Math.PI + ((Math.PI / this.data.length) * i);\n            ctx.rotate(rotate);\n            ctx.beginPath();\n            ctx.moveTo(0, 0);\n            ctx.arc(0, 0, applyRadius, 0, Math.PI / this.data.length);\n            ctx.closePath();\n            ctx.fill();\n            // ctx.stroke();\n            ctx.restore(); // 기존 드로잉 상태를 복구한다.\n        }\n\n\n        applyRadius = (radius * 95) / 100;\n        // checked\n        for (let i = 0; i < this.data.length; i++) {\n            const data = this.data[i];\n            if (!data.checked) {\n                continue;\n            }\n            ctx.save(); // 드로잉 상태를 저정한다.\n            ctx.fillStyle = data.fillStyle;\n            ctx.lineWidth = 1;\n            ctx.strokeStyle = '#c3c3c3';\n            ctx.shadowColor = '#666666';\n            ctx.shadowBlur = 10;\n            ctx.shadowOffsetX = 0;\n            ctx.shadowOffsetY = 1;\n            ctx.translate(centerX, canvas.height);\n            ctx.rotate(Math.PI + ((Math.PI / this.data.length) * i));\n            ctx.beginPath();\n            ctx.moveTo(0, 0);\n            ctx.arc(0, 0, applyRadius, 0, Math.PI / this.data.length);\n            ctx.closePath();\n            ctx.fill();\n            // ctx.stroke();\n            ctx.restore(); // 기존 드로잉 상태를 복구한다.\n        }\n\n\n        applyRadius = (radius * 60) / 100;\n\n\n        for (let i = 0; i < this.data.length; i++) {\n            const data = this.data[i];\n            ctx.save(); // 드로잉 상태를 저정한다.\n            ctx.fillStyle = data.titleStyle;\n            ctx.lineWidth = 1;\n            ctx.strokeStyle = '#c3c3c3';\n            ctx.shadowColor = '#999999';\n            ctx.shadowBlur = 3;\n            ctx.shadowOffsetX = 0;\n            ctx.shadowOffsetY = 1;\n            // title\n            // ctx.font = '20px Arial';\n            // console.log((Math.PI / this.data.length));\n            // ctx.font = ((Math.PI / (this.data.length))  + (this.width / this.data.length)) + 'px Arial';\n            ctx.font = (((this.width / this.data.length)) * 20 / 100) + 'px Arial';\n            ctx.textAlign = 'center';\n            ctx.translate(centerX, canvas.height);\n\n            // ctx.font = ((this.width / this.data.length) - 100) + 'px Arial';\n            // const rotate = ((Math.PI / this.data.length) * i);\n            // let rotate = (Math.PI * 1.5) + ((Math.PI / this.data.length) * i) + ((Math.PI / this.data.length) * i) / 2;\n            const rotate = (-Math.PI / 2); // 초기각도셋팅\n            ctx.rotate(rotate);\n            ctx.rotate(((Math.PI / this.data.length) * i)); // 글자 초기각도 셋팅\n            ctx.rotate((Math.PI / this.data.length) / 2); // 글자 cneter 셋팅\n            // let rotate = (Math.PI * 1.5);\n            ctx.beginPath();\n            ctx.moveTo(0, 0);\n            ctx.strokeText(data.title, 0, -applyRadius)\n            ctx.fillText(data.title, 0, -applyRadius);\n            ctx.closePath();\n            ctx.fill();\n            ctx.stroke();\n            ctx.restore(); // 기존 드로잉 상태를 복구한다.\n        }\n\n\n\n        applyRadius = (radius * 50) / 100;\n        // arrow\n        for (let i = 0; i < this.data.length; i++) {\n            const data = this.data[i];\n            if (!data.checked) {\n                continue;\n            }\n            ctx.save(); // 드로잉 상태를 저정한다.\n            ctx.fillStyle = '#ffffff';\n            ctx.lineWidth = 1;\n            ctx.strokeStyle = '#ffffff';\n            ctx.shadowColor = '#c3c3c3';\n            ctx.shadowBlur = 5;\n            ctx.shadowOffsetX = 0;\n            ctx.shadowOffsetY = 4;\n            // ctx.font = '20px Arial';\n            // ctx.font = ((this.width / this.data.length) - 100) + 'px Arial';\n            console.log((Math.PI / this.data.length))\n            ctx.font = ((Math.PI / this.data.length) / 2 * (this.width / this.data.length)) + 'px Arial';\n            ctx.textAlign = 'center';\n\n            ctx.translate(centerX, canvas.height);\n            // const rotate = ((Math.PI / this.data.length) * i);\n            // let rotate = (Math.PI * 1.5) + ((Math.PI / this.data.length) * i) + ((Math.PI / this.data.length) * i) / 2;\n            // let rotate = (Math.PI * 1.5);\n            const rotate = (-Math.PI / 2); // 초기각도셋팅\n            ctx.rotate(rotate);\n            ctx.rotate(((Math.PI / this.data.length) * i)); // 글자 초기각도 셋팅\n            ctx.rotate((Math.PI / this.data.length) / 2); // 글자 cneter 셋팅\n            ctx.beginPath();\n            const scale = ((Math.PI / this.data.length) / 2 * (this.width / this.data.length));\n            ctx.moveTo(-scale, 0);\n            ctx.lineTo(0, -applyRadius);\n            ctx.lineTo(scale, 0);\n            ctx.closePath();\n            ctx.fill();\n            ctx.stroke();\n            ctx.restore(); // 기존 드로잉 상태를 복구한다.\n        }\n\n\n\n\n\n\n\n        applyRadius = (radius * 40) / 100;\n        // margin arc\n        ctx.save(); // 드로잉 상태를 저정한다.\n        ctx.fillStyle = '#ffffff';\n        ctx.lineWidth = 1;\n        ctx.strokeStyle = '#ffffff';\n        ctx.shadowColor = '#c3c3c3';\n        ctx.shadowBlur = 5;\n        ctx.shadowOffsetX = 0;\n        ctx.shadowOffsetY = 4;\n        ctx.translate(centerX, canvas.height);\n        ctx.rotate(Math.PI);\n        ctx.beginPath();\n        ctx.moveTo(0, 0);\n        ctx.arc(0, 0, applyRadius, 0, Math.PI);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n        ctx.restore(); // 기존 드로잉 상태를 복구한다.\n\n\n\n\n\n        // const degree = (Math.PI * 2) / sides; // 각 면에 대한 각도를 계산한다.\n        // ctx.save(); // 드로잉 상태를 저정한다.\n        // ctx.strokeStyle = this.polygonDataFillStyle;\n        // ctx.fillStyle = this.polygonDataFillStyle;\n        // ctx.beginPath(); // 경로 그리기 시작\n        // ctx.translate(x, y); // 드로잉 좌표 공간을 다각형 중심좌표로 이동한다. context.rotate(startAngle);\n        // // 시작 각도를 중심으로 그리도록 하기 위하여 회전한다. context.moveTo(radius, 0); //다각형의 시작 위치로 이동한다.\n        // ctx.rotate(startAngle); // 시작 각도를 중심으로 그리도록 하기 위하여 회전한다.\n        // ctx.moveTo((radius * data.data[0]) / data.max, 0); // 다각형의 시작 위치로 이동한다.\n        // // ctx.lineTo(0, 0);\n        // for (let i = 1; i < sides; i++) {// 면의수만큼루프를반복한다\n        //     // 다음 꼭지점까지 선을 그린다.\n        //     const setRedius = (radius * data.data[i]) / data.max;\n        //     // console.log(setRedius);\n        //     const sx = setRedius * Math.cos(degree * i);\n        //     const sy = setRedius * Math.sin(degree * i);\n        //     ctx.lineTo(sx, sy);\n        // }\n        // ctx.fill();\n        // ctx.closePath(); // 패스를 닫는다. context.restore(); //기존 드로잉 상태를 복구한다.\n        // ctx.stroke();\n        // ctx.restore(); // 기존 드로잉 상태를 복구한다.\n    }\n\n    public drawArc() {\n        alert(1);\n        // const canvas = this.canvasElementRef.nativeElement as HTMLCanvasElement;\n        // const ctx = canvas.getContext('2d');\n        // const radius = (centerX) - this.padding;\n        // ctx.beginPath();\n        // // ctx.arc(canvas.width / 2, canvas.height / 2, radius, 0, this.angleRadian, true);\n        // // const end = this.angleRadian / 2 - 0.4;\n        // const end = this.angleRadian;\n        // ctx.arc(canvas.width / 2, canvas.height / 2, radius, Math.PI - end, end, true);\n        // ctx.stroke();\n    }\n}\n"]}